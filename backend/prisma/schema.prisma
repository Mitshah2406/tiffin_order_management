// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Timing {
  MORNING
  EVENING
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  mobileNumber Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]
}

model Product {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  Customizations Customizations[]
  Item           Item[]
}

model Item {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  productId       String          @db.ObjectId
  product         Product?        @relation(fields: [productId], references: [id])
  quantity        Int
  customizationId String?         @db.ObjectId
  customization   Customizations? @relation(fields: [customizationId], references: [id])
  orderId         String          @db.ObjectId
  order           Order?          @relation(fields: [orderId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Customizations {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  price       Float
  productId   String   @db.ObjectId
  product     Product? @relation(fields: [productId], references: [id])
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PAID
  UNPAID
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderTime   Timing
  orderDate   DateTime    @default(now())
  customerId  String      @db.ObjectId
  orderAmount Float
  orderStatus OrderStatus
  totalItems  Int
  customer    Customer?   @relation(fields: [customerId], references: [id])
  Item        Item[]
  createdAt   DateTime    @default(now())
}

// model Item {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   productId       String   @db.ObjectId
//   product         Product? @relation(fields: [productId], references: [id])
//   quantity        Int
//   customizationId String?  @db.ObjectId
//   orderId         String   @db.ObjectId
//   order           Order?   @relation(fields: [orderId], references: [id])
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt
// }
